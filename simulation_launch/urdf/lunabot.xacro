<?xml version="1.0"?>
<robot name="lunabot" xmlns:xacro="http://ros.org/wiki/xacro">

    <!-- Define robot constants -->
    <xacro:property name="base_length" value="0.5"/>
    <xacro:property name="base_width" value="0.25"/>
    <xacro:property name="base_height" value="0.25"/>

    <xacro:property name="wheel_radius" value="0.05"/>
    <xacro:property name="wheel_width" value="0.05"/>
    <xacro:property name="wheel_xoff" value="0.17"/>
    <xacro:property name="wheel_yoff" value="0.15"/>
    <xacro:property name="wheel_zoff" value="0.13"/>

    <xacro:property name="camera_size" value="0.05"/>

    <!-- Define intertial property macros -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + h*h)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertia" params="m r h">
        <inertial>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- Base Footprint -->
    <link name="base_footprint">
        <origin xyz="0 0 0" rpy="0 0 0"/>
    </link>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="5" w="${base_length}" h="${base_width}" d="${base_height}"/>
    </link>
    <joint name="base_j" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${wheel_zoff+wheel_radius}" rpy="0 0 0"/>
    </joint>

    <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <surface>
                    <friction>
                        <ode>
                            <mu>100.0</mu>
                            <mu2>100.0</mu2>
                        </ode>
                    </friction>
                    <contact>
                        <ode>
                            <min_depth>0.01</min_depth>
                        </ode>
                    </contact>
                </surface>
            </collision>
            <xacro:cylinder_inertia m="1" r="${wheel_radius}" h="${wheel_width}"/>
        </link>

        <joint name="${prefix}_j" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*wheel_yoff} ${-wheel_zoff}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel prefix="wheel_f_r" x_reflect="1.0" y_reflect="-1.0"/>
    <xacro:wheel prefix="wheel_f_l" x_reflect="1.0" y_reflect="1.0"/>
    <!-- <xacro:wheel prefix="wheel_m_r" x_reflect="0.0" y_reflect="-1.0"/>
    <xacro:wheel prefix="wheel_m_l" x_reflect="0.0" y_reflect="1.0"/> -->
    <xacro:wheel prefix="wheel_b_r" x_reflect="-1.0" y_reflect="-1.0"/>
    <xacro:wheel prefix="wheel_b_l" x_reflect="-1.0" y_reflect="1.0"/>

    <link name="depth_camera_link">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <visual>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
            <collision>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </collision>
            <xacro:box_inertia m="0.1" w="${camera_size}" h="${camera_size}" d="${camera_size}"/>
        </visual>
    </link>
    <joint name="depth_camera_j" type="fixed">
        <parent link="base_link"/>
        <child link="depth_camera_link"/>
        <origin xyz="${base_length/2} 0 ${base_height/2}" rpy="0 0 0"/>
    </joint>
    <link name="depth_camera_optical_link"/>
    <joint name="depth_camera_optical_j" type="fixed">
        <parent link="depth_camera_link"/>
        <child link="depth_camera_optical_link"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <link name="camera_link">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <visual>
            <geometry>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </geometry>
            <collision>
                <box size="${camera_size} ${camera_size} ${camera_size}"/>
            </collision>
        </visual>
    </link>
    <joint name="camera_j" type="fixed">
        <parent link="base_link"/>
        <child link="camera_link"/>
        <origin xyz="${-base_length/2} 0 ${base_height/2}" rpy="0 0 ${pi}"/>
    </joint>
    <link name="camera_optical_link"/>
    <joint name="camera_optical_j" type="fixed">
        <parent link="camera_link"/>
        <child link="camera_optical_link"/>
        <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
    </joint>

    <gazebo>
        <plugin name='diff_drive_f' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>
            <left_joint>wheel_f_l_j</left_joint>
            <right_joint>wheel_f_r_j</right_joint>
            <wheel_separation>0.3</wheel_separation>
            <wheel_diameter>0.1</wheel_diameter>
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>
            <command_topic>cmd_vel</command_topic>
            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin>

        <!-- <plugin name='diff_drive_m' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>
            <left_joint>wheel_m_l_j</left_joint>
            <right_joint>wheel_m_r_j</right_joint>
            <wheel_separation>0.3</wheel_separation>
            <wheel_diameter>0.1</wheel_diameter>
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>
            <command_topic>cmd_vel</command_topic>
            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin> -->

        <plugin name='diff_drive_b' filename='libgazebo_ros_diff_drive.so'>
            <update_rate>30</update_rate>
            <left_joint>wheel_b_l_j</left_joint>
            <right_joint>wheel_b_r_j</right_joint>
            <wheel_separation>0.3</wheel_separation>
            <wheel_diameter>0.1</wheel_diameter>
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>
            <command_topic>cmd_vel</command_topic>
            <publish_odom>false</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin>
    </gazebo>

    <gazebo reference="depth_camera_link">
        <material>Gazebo/Red</material>
        <sensor name="depth_camera" type="depth">
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>
            <camera>
                <horizontal_fov>1.51844</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>10.0</far>
                </clip>
            </camera>
            <plugin filename="libgazebo_ros_camera.so" name="depth_camera_controller">
                <frame_name>depth_camera_optical_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>

    <gazebo reference="camera_link">
        <material>Gazebo/Red</material>
        <sensor name="camera" type="camera">
            <always_on>1</always_on>
            <update_rate>10</update_rate>
            <visualize>true</visualize>
            <camera>
                <horizontal_fov>1.089</horizontal_fov>
                <image>
                    <width>320</width>
                    <height>320</height>
                    <format>R8G8B8</format>
                </image>
                <clip>
                    <near>0.05</near>
                    <far>10.0</far>
                </clip>
            </camera>
            <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
                <frame_name>camera_optical_link</frame_name>
            </plugin>
        </sensor>
    </gazebo>

</robot>